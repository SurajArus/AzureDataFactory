{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlBrowser",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlBrowser",
						"type": "DatasetReference"
					},
					"name": "sourceEcommerceADF"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTableBrowserADF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlBrowser",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "HashCompute"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "ConditionalSplit1"
				}
			],
			"script": "source(output(\n\t\tBrowserID as integer,\n\t\tReferrerDomain as string,\n\t\tUTMSource as string,\n\t\tUTMMedium as string,\n\t\tUTMCampaign as string,\n\t\tUTMContent as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source1\nsource(output(\n\t\tBrowserID as integer,\n\t\tReferrerDomain as string,\n\t\tUTMSource as string,\n\t\tUTMMedium as string,\n\t\tUTMCampaign as string,\n\t\tUTMContent as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceEcommerceADF\nsource1 derive(HashColumn = toBinary(md5(ReferrerDomain+UTMSource+UTMMedium+UTMCampaign+UTMContent)),\n\t\tCreatedOn = currentTimestamp(),\n\t\tUpdatedOn = currentTimestamp()) ~> HashCompute\nHashCompute, sourceEcommerceADF lookup(source1@BrowserID == sourceEcommerceADF@BrowserID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nLookup1 split(isNull(sourceEcommerceADF@BrowserID),\n\t!isNull(sourceEcommerceADF@BrowserID) && notEquals(HashColumn,HashColumn),\n\tdisjoint: true) ~> ConditionalSplit1@(NewRecord, UpdateRecord, DeleteRecord)\nConditionalSplit1@NewRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tBrowserID as integer,\n\t\tReferrerDomain as string,\n\t\tUTMSource as string,\n\t\tUTMMedium as string,\n\t\tUTMCampaign as string,\n\t\tUTMContent as string,\n\t\tCreatedOn as timestamp,\n\t\tCreatedBy as string,\n\t\tUpdatedOn as timestamp,\n\t\tUpdatedBy as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tdateFormat:'dd-MM-yyyy',\n\ttimestampFormat:'MM/dd/yyyy HH:mm:ss',\n\tbooleanFormat: ['true', 'false'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tBrowserID = ConditionalSplit1@NewRecord@BrowserID,\n\t\tReferrerDomain = ConditionalSplit1@NewRecord@ReferrerDomain,\n\t\tUTMSource = ConditionalSplit1@NewRecord@UTMSource,\n\t\tUTMMedium = ConditionalSplit1@NewRecord@UTMMedium,\n\t\tUTMCampaign = ConditionalSplit1@NewRecord@UTMCampaign,\n\t\tUTMContent = ConditionalSplit1@NewRecord@UTMContent,\n\t\tCreatedOn,\n\t\tUpdatedOn\n\t)) ~> sink1\nConditionalSplit1@UpdateRecord sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tBrowserID as integer,\n\t\tReferrerDomain as string,\n\t\tUTMSource as string,\n\t\tUTMMedium as string,\n\t\tUTMCampaign as string,\n\t\tUTMContent as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
		}
	}
}